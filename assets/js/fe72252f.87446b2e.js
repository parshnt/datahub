"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7285],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=u(a),c=r,g=m["".concat(s,".").concat(c)]||m[c]||p[c]||l;return a?n.createElement(g,i(i({ref:t},d),{},{components:a})):n.createElement(g,i({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},18679:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),r=a(86010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},t)}},34259:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(87462),r=a(67294),l=a(86010),i=a(51048),o=a(33609),s=a(1943),u=a(72957);const d="tabList__CuJ",p="tabItem_LNqP";function m(e){var t,a;const{lazy:i,block:m,defaultValue:c,values:g,groupId:k,className:b}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=g?g:h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),N=(0,o.l)(f,((e,t)=>e.value===t.value));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===c?c:null!=(t=null!=c?c:null==(a=h.find((e=>e.props.default)))?void 0:a.props.value)?t:h[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:v,setTabGroupChoices:T}=(0,s.U)(),[_,w]=(0,r.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:D}=(0,u.o5)();if(null!=k){const e=v[k];null!=e&&e!==_&&f.some((t=>t.value===e))&&w(e)}const S=e=>{const t=e.currentTarget,a=C.indexOf(t),n=f[a].value;n!==_&&(D(t),w(n),null!=k&&T(k,String(n)))},I=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=C.indexOf(e.currentTarget)+1;a=null!=(n=C[t])?n:C[0];break}case"ArrowLeft":{var r;const t=C.indexOf(e.currentTarget)-1;a=null!=(r=C[t])?r:C[C.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},b)},f.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:e=>C.push(e),onKeyDown:I,onFocus:S,onClick:S},i,{className:(0,l.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":_===t})}),null!=a?a:t)}))),i?(0,r.cloneElement)(h.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==_})))))}function c(e){const t=(0,i.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},11589:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var n=a(87462),r=(a(67294),a(3905)),l=a(34259),i=a(18679);const o={title:"Tableau",slug:"/generated/ingestion/sources/tableau",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/tableau.md"},s="Tableau",u={unversionedId:"docs/generated/ingestion/sources/tableau",id:"docs/generated/ingestion/sources/tableau",title:"Tableau",description:"Module tableau",source:"@site/genDocs/docs/generated/ingestion/sources/tableau.md",sourceDirName:"docs/generated/ingestion/sources",slug:"/generated/ingestion/sources/tableau",permalink:"/docs/generated/ingestion/sources/tableau",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/tableau.md",tags:[],version:"current",frontMatter:{title:"Tableau",slug:"/generated/ingestion/sources/tableau",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/tableau.md"},sidebar:"overviewSidebar",previous:{title:"Superset",permalink:"/docs/generated/ingestion/sources/superset"},next:{title:"Trino",permalink:"/docs/generated/ingestion/sources/trino"}},d={},p=[{value:"Module <code>tableau</code>",id:"module-tableau",level:2},{value:"Important Capabilities",id:"important-capabilities",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Ingestion through UI",id:"ingestion-through-ui",level:3},{value:"Integration Details",id:"integration-details",level:2},{value:"Concept Mapping",id:"concept-mapping",level:3},{value:"Workbook",id:"workbook",level:4},{value:"Dashboard",id:"dashboard",level:4},{value:"Sheet",id:"sheet",level:4},{value:"Embedded Data Source",id:"embedded-data-source",level:4},{value:"Published Data Source",id:"published-data-source",level:4},{value:"Custom SQL Data Source",id:"custom-sql-data-source",level:4},{value:"Lineage",id:"lineage",level:4},{value:"Caveats",id:"caveats",level:4},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Why are only some workbooks/custom SQLs/published datasources ingested from the specified project?",id:"why-are-only-some-workbookscustom-sqlspublished-datasources-ingested-from-the-specified-project",level:3},{value:"CLI based Ingestion",id:"cli-based-ingestion",level:3},{value:"Install the Plugin",id:"install-the-plugin",level:4},{value:"Starter Recipe",id:"starter-recipe",level:3},{value:"Config Details",id:"config-details",level:3},{value:"Code Coordinates",id:"code-coordinates",level:3},{value:"Questions",id:"questions",level:2}],m={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tableau"},"Tableau"),(0,r.kt)("h2",{id:"module-tableau"},"Module ",(0,r.kt)("inlineCode",{parentName:"h2"},"tableau")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/support%20status-incubating-blue",alt:"Incubating"})),(0,r.kt)("h3",{id:"important-capabilities"},"Important Capabilities"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Capability"),(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dataset Usage"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Dashboard/Chart view counts, enabled using extract_usage_stats config")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Descriptions"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Enabled by default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/metadata-ingestion/docs/dev_guides/stateful#stale-entity-removal"},"Detect Deleted Entities")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Enabled by default when stateful ingestion is turned on.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/domains"},"Domains")),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"Requires transformer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Extract Ownership"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Requires recipe configuration")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Extract Tags"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Requires recipe configuration")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/platform-instances"},"Platform Instance")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Enabled by default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Table-Level Lineage"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Enabled by default")))),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"In order to ingest metadata from tableau, you will need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tableau Server Version 2021.1.10 and above. It may also work for older versions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://help.tableau.com/current/api/metadata_api/en-us/docs/meta_api_start.html#enable-the-tableau-metadata-api-for-tableau-server"},"Enable the Tableau Metadata API")," for Tableau Server, if its not already enabled."),(0,r.kt)("li",{parentName:"ul"},"Tableau Credentials (Username/Password or ",(0,r.kt)("a",{parentName:"li",href:"https://help.tableau.com/current/pro/desktop/en-us/useracct.htm#create-and-revoke-personal-access-tokens"},"Personal Access Token"),")")),(0,r.kt)("h3",{id:"ingestion-through-ui"},"Ingestion through UI"),(0,r.kt)("p",null,"The following video shows you how to get started with ingesting Tableau metadata through the UI."),(0,r.kt)("div",{style:{position:"relative",paddingBottom:"57.692307692307686%",height:0}},(0,r.kt)("iframe",{src:"https://www.loom.com/embed/ef521c4e66564614a6ddde35dc3840f8",frameBorder:0,webkitallowfullscreen:"",mozallowfullscreen:"",allowFullScreen:"",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"}})),(0,r.kt)("h2",{id:"integration-details"},"Integration Details"),(0,r.kt)("p",null,"This plugin extracts Sheets, Dashboards, Embedded and Published Data sources metadata within Workbooks in a given project\non a Tableau site. This plugin is in beta and has only been tested on PostgreSQL database and sample workbooks\non Tableau online. Tableau's GraphQL interface is used to extract metadata information. Queries used to extract metadata are located\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata-ingestion/src/datahub/ingestion/source/tableau_common.py")),(0,r.kt)("h3",{id:"concept-mapping"},"Concept Mapping"),(0,r.kt)("p",null,"This ingestion source maps the following Source System Concepts to DataHub Concepts:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Source Concept"),(0,r.kt)("th",{parentName:"tr",align:null},"DataHub Concept"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"Tableau"')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/dataplatform"},"Data Platform")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Embedded DataSource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/dataset"},"Dataset")),(0,r.kt)("td",{parentName:"tr",align:null},"SubType ",(0,r.kt)("inlineCode",{parentName:"td"},'"Embedded Data Source"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Published DataSource"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/dataset"},"Dataset")),(0,r.kt)("td",{parentName:"tr",align:null},"SubType ",(0,r.kt)("inlineCode",{parentName:"td"},'"Published Data Source"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Custom SQL Table"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/dataset"},"Dataset")),(0,r.kt)("td",{parentName:"tr",align:null},"SubTypes ",(0,r.kt)("inlineCode",{parentName:"td"},'"View"'),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"Custom SQL"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Embedded or External Tables"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/dataset"},"Dataset")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sheet"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/chart"},"Chart")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dashboard"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/dashboard"},"Dashboard")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"User"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/corpuser"},"User (a.k.a CorpUser)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Workbook"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/container"},"Container")),(0,r.kt)("td",{parentName:"tr",align:null},"SubType ",(0,r.kt)("inlineCode",{parentName:"td"},'"Workbook"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tag"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/tag"},"Tag")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Workbook"},"Workbook")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Dashboard"},"Dashboard")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Sheet"},"Sheet")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Embedded-Data-Source"},"Embedded Data source")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Published-Data-Source"},"Published Data source")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Custom-SQL-Data-Source"},"Custom SQL Data source"))),(0,r.kt)("h4",{id:"workbook"},"Workbook"),(0,r.kt)("p",null,"Workbooks from Tableau are ingested as Container in datahub. ",(0,r.kt)("br",null)),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GraphQL query ",(0,r.kt)("br",null))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  workbooksConnection(\n    first: 10\n    offset: 0\n    filter: { projectNameWithin: ["default", "Project 2"] }\n  ) {\n    nodes {\n      id\n      name\n      luid\n      uri\n      projectName\n      owner {\n        username\n      }\n      description\n      uri\n      createdAt\n      updatedAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    totalCount\n  }\n}\n')),(0,r.kt)("h4",{id:"dashboard"},"Dashboard"),(0,r.kt)("p",null,"Dashboards from Tableau are ingested as Dashboard in datahub. ",(0,r.kt)("br",null)),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GraphQL query ",(0,r.kt)("br",null))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  workbooksConnection(first: 10, offset: 0, filter: {projectNameWithin: ["default", "Project 2"]}) {\n    nodes {\n      .....\n      dashboards {\n        id\n        name\n        path\n        createdAt\n        updatedAt\n        sheets {\n          id\n          name\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    totalCount\n  }\n}\n\n')),(0,r.kt)("h4",{id:"sheet"},"Sheet"),(0,r.kt)("p",null,"Sheets from Tableau are ingested as charts in datahub. ",(0,r.kt)("br",null)),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GraphQL query ",(0,r.kt)("br",null))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  workbooksConnection(first: 10, offset: 0, filter: {projectNameWithin: ["default"]}) {\n    .....\n      sheets {\n        id\n        name\n        path\n        createdAt\n        updatedAt\n        tags {\n          name\n        }\n        containedInDashboards {\n          name\n          path\n        }\n        upstreamDatasources {\n          id\n          name\n        }\n        datasourceFields {\n          __typename\n          id\n          name\n          description\n          upstreamColumns {\n            name\n          }\n          ... on ColumnField {\n            dataCategory\n            role\n            dataType\n            aggregation\n          }\n          ... on CalculatedField {\n            role\n            dataType\n            aggregation\n            formula\n          }\n          ... on GroupField {\n            role\n            dataType\n          }\n          ... on DatasourceField {\n            remoteField {\n              __typename\n              id\n              name\n              description\n              folderName\n              ... on ColumnField {\n                dataCategory\n                role\n                dataType\n                aggregation\n              }\n              ... on CalculatedField {\n                role\n                dataType\n                aggregation\n                formula\n              }\n              ... on GroupField {\n                role\n                dataType\n              }\n            }\n          }\n        }\n      }\n    }\n     .....\n  }\n}\n')),(0,r.kt)("h4",{id:"embedded-data-source"},"Embedded Data Source"),(0,r.kt)("p",null,"Embedded Data source from Tableau is ingested as a Dataset in datahub."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GraphQL query ",(0,r.kt)("br",null))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  workbooksConnection(first: 10, offset: 0, filter: {projectNameWithin: ["default"]}) {\n    nodes {\n      ....\n      embeddedDatasources {\n        __typename\n        id\n        name\n        hasExtracts\n        extractLastRefreshTime\n        extractLastIncrementalUpdateTime\n        extractLastUpdateTime\n        upstreamDatabases {\n          id\n          name\n          connectionType\n          isEmbedded\n        }\n        upstreamTables {\n          name\n          schema\n          columns {\n            name\n            remoteType\n          }\n        }\n        fields {\n          __typename\n          id\n          name\n          description\n          isHidden\n          folderName\n          ... on ColumnField {\n            dataCategory\n            role\n            dataType\n            defaultFormat\n            aggregation\n            columns {\n              table {\n                ... on CustomSQLTable {\n                  id\n                  name\n                }\n              }\n            }\n          }\n          ... on CalculatedField {\n            role\n            dataType\n            defaultFormat\n            aggregation\n            formula\n          }\n          ... on GroupField {\n            role\n            dataType\n          }\n        }\n        upstreamDatasources {\n          id\n          name\n        }\n        workbook {\n          name\n          projectName\n        }\n      }\n    }\n    ....\n  }\n}\n')),(0,r.kt)("h4",{id:"published-data-source"},"Published Data Source"),(0,r.kt)("p",null,"Published Data source from Tableau is ingested as a Dataset in datahub."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GraphQL query ",(0,r.kt)("br",null))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  publishedDatasourcesConnection(\n    first: 10\n    offset: 0\n    filter: {\n      idWithin: [\n        "00cce29f-b561-bb41-3557-8e19660bb5dd"\n        "618c87db-5959-338b-bcc7-6f5f4cc0b6c6"\n      ]\n    }\n  ) {\n    nodes {\n      __typename\n      id\n      name\n      hasExtracts\n      extractLastRefreshTime\n      extractLastIncrementalUpdateTime\n      extractLastUpdateTime\n      downstreamSheets {\n        id\n        name\n      }\n      upstreamTables {\n        name\n        schema\n        fullName\n        connectionType\n        description\n        contact {\n          name\n        }\n      }\n      fields {\n        __typename\n        id\n        name\n        description\n        isHidden\n        folderName\n        ... on ColumnField {\n          dataCategory\n          role\n          dataType\n          defaultFormat\n          aggregation\n          columns {\n            table {\n              ... on CustomSQLTable {\n                id\n                name\n              }\n            }\n          }\n        }\n        ... on CalculatedField {\n          role\n          dataType\n          defaultFormat\n          aggregation\n          formula\n        }\n        ... on GroupField {\n          role\n          dataType\n        }\n      }\n      owner {\n        username\n      }\n      description\n      uri\n      projectName\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    totalCount\n  }\n}\n')),(0,r.kt)("h4",{id:"custom-sql-data-source"},"Custom SQL Data Source"),(0,r.kt)("p",null,"For custom sql data sources, the query is viewable in UI under View Definition tab. ",(0,r.kt)("br",null)),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GraphQL query ",(0,r.kt)("br",null))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  customSQLTablesConnection(\n    first: 10\n    offset: 0\n    filter: { idWithin: ["22b0b4c3-6b85-713d-a161-5a87fdd78f40"] }\n  ) {\n    nodes {\n      id\n      name\n      query\n      columns {\n        id\n        name\n        remoteType\n        description\n        referencedByFields {\n          datasource {\n            id\n            name\n            upstreamDatabases {\n              id\n              name\n            }\n            upstreamTables {\n              id\n              name\n              schema\n              connectionType\n              columns {\n                id\n              }\n            }\n            ... on PublishedDatasource {\n              projectName\n            }\n            ... on EmbeddedDatasource {\n              workbook {\n                name\n                projectName\n              }\n            }\n          }\n        }\n      }\n      tables {\n        id\n        name\n        schema\n        connectionType\n      }\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"lineage"},"Lineage"),(0,r.kt)("p",null,"Lineage is emitted as received from Tableau's metadata API for"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sheets contained in Dashboard"),(0,r.kt)("li",{parentName:"ul"},"Embedded or Published datasources upstream to Sheet"),(0,r.kt)("li",{parentName:"ul"},"Published datasources upstream to Embedded datasource"),(0,r.kt)("li",{parentName:"ul"},"Tables upstream to Embedded or Published datasource"),(0,r.kt)("li",{parentName:"ul"},"Custom SQL datasources upstream to Embedded or Published datasource"),(0,r.kt)("li",{parentName:"ul"},"Tables upstream to Custom SQL datasource")),(0,r.kt)("h4",{id:"caveats"},"Caveats"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tableau metadata API might return incorrect schema name for tables for some databases, leading to incorrect metadata in DataHub. This source attempts to extract correct schema from databaseTable's fully qualified name, wherever possible. Read ",(0,r.kt)("a",{parentName:"li",href:"https://help.tableau.com/current/api/metadata_api/en-us/docs/meta_api_model.html#schema_attribute"},"Using the databaseTable object in query")," for caveats in using schema attribute.")),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("h3",{id:"why-are-only-some-workbookscustom-sqlspublished-datasources-ingested-from-the-specified-project"},"Why are only some workbooks/custom SQLs/published datasources ingested from the specified project?"),(0,r.kt)("p",null,'This may happen when the Tableau API returns NODE_LIMIT_EXCEEDED error in response to metadata query and returns partial results with message "Showing partial results. , The request exceeded the \u2018n\u2019 node limit. Use pagination, additional filtering, or both in the query to adjust results." To resolve this, consider'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"reducing the page size using the ",(0,r.kt)("inlineCode",{parentName:"li"},"page_size")," config param in datahub recipe (Defaults to 10)."),(0,r.kt)("li",{parentName:"ul"},"increasing tableau configuration ",(0,r.kt)("a",{parentName:"li",href:"https://help.tableau.com/current/server/en-us/cli_configuration-set_tsm.htm#metadata_nodelimit"},"metadata query node limit")," to higher value.")),(0,r.kt)("h3",{id:"cli-based-ingestion"},"CLI based Ingestion"),(0,r.kt)("h4",{id:"install-the-plugin"},"Install the Plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pip install 'acryl-datahub[tableau]'\n")),(0,r.kt)("h3",{id:"starter-recipe"},"Starter Recipe"),(0,r.kt)("p",null,"Check out the following recipe to get started with ingestion! See ",(0,r.kt)("a",{parentName:"p",href:"#config-details"},"below")," for full configuration options."),(0,r.kt)("p",null,"For general pointers on writing and running a recipe, see our ",(0,r.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion#recipes"},"main recipe guide"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: tableau\n  config:\n    # Coordinates\n    connect_uri: https://prod-ca-a.online.tableau.com\n    site: acryl\n    platform_instance: acryl_instance\n    projects: ["default", "Project 2"]\n\n    # Credentials\n    username: "${TABLEAU_USER}"\n    password: "${TABLEAU_PASSWORD}"\n\n    # Options\n    ingest_tags: True\n    ingest_owner: True\n    default_schema_map:\n      mydatabase: public\n      anotherdatabase: anotherschema\n\nsink:\n  # sink configs\n')),(0,r.kt)("h3",{id:"config-details"},"Config Details"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"options",label:"Options",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Note that a ",(0,r.kt)("inlineCode",{parentName:"p"},".")," is used to denote nested fields in the YAML recipe."),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,"View All Configuration Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"connect_uri"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau host URL."),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"username"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau username, must be set if authenticating using username/password."),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"password"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau password, must be set if authenticating using username/password."),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"token_name"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau token name, must be set if authenticating using a personal access token."),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"token_value"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau token value, must be set if authenticating using a personal access token."),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"site"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Tableau Site. Always required for Tableau Online. Use emptystring to connect with Default site on Tableau Server."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"platform_instance"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The instance of the platform that all assets produced by this recipe belong to"),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ssl_verify"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Generic dict"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to verify SSL certificates. If using self-signed certificates, set to false or provide the path to the .pem certificate bundle."),(0,r.kt)("td",{parentName:"tr",align:null},"True")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extract_column_level_lineage"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"When enabled, extracts column-level lineage from Tableau Datasources"),(0,r.kt)("td",{parentName:"tr",align:null},"True")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"env"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Environment to use in namespace when constructing URNs."),(0,r.kt)("td",{parentName:"tr",align:null},"PROD")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"platform"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The platform that this source connects to"),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"platform_instance_map"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Dict","[str,string]"),(0,r.kt)("td",{parentName:"tr",align:null},"A holder for platform -> platform_instance mappings to generate correct dataset urns"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"projects"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Array of string"),(0,r.kt)("td",{parentName:"tr",align:null},"List of projects"),(0,r.kt)("td",{parentName:"tr",align:null},"['default']")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"default_schema_map"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Dict"),(0,r.kt)("td",{parentName:"tr",align:null},"Default schema to use when schema is not found."),(0,r.kt)("td",{parentName:"tr",align:null},"{}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ingest_tags"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Ingest Tags from source. This will override Tags entered from UI"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ingest_owner"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Ingest Owner from source. This will override Owner info entered from UI"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ingest_tables_external"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Ingest details for tables external to (not embedded in) tableau as entities."),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"page_size"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of metadata objects (e.g. CustomSQLTable, PublishedDatasource, etc) to query at a time using Tableau api."),(0,r.kt)("td",{parentName:"tr",align:null},"10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extract_usage_stats"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"[experimental]"," Extract usage statistics for dashboards and charts."),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"TableauStatefulIngestionConfig (see below for fields)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.enabled"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of the ingestion state provider registered with datahub."),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.max_checkpoint_state_size"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:null},"The maximum size of the checkpoint state in bytes. Default is 16MB"),(0,r.kt)("td",{parentName:"tr",align:null},"16777216")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.state_provider"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"DynamicTypedStateProviderConfig (see below for fields)"),(0,r.kt)("td",{parentName:"tr",align:null},"The ingestion state provider configuration."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.state_provider.type"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2753 (required if stateful_ingestion.state_provider is set)"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of the state provider to use. For DataHub use ",(0,r.kt)("inlineCode",{parentName:"td"},"datahub")),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.state_provider.config"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Generic dict"),(0,r.kt)("td",{parentName:"tr",align:null},"The configuration required for initializing the state provider. Default: The datahub_api config if set at pipeline level. Otherwise, the default DatahubClientConfig. See the defaults (",(0,r.kt)("a",{parentName:"td",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/graph/client.py#L19"},"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/graph/client.py#L19"),")."),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.ignore_old_state"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to True, ignores the previous checkpoint state."),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.ignore_new_state"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to True, ignores the current checkpoint state."),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.remove_stale_metadata"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Soft-deletes the entities of type  in the last successful run but missing in the current run with stateful_ingestion enabled."),(0,r.kt)("td",{parentName:"tr",align:null},"True")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stateful_ingestion.fail_safe_threshold"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Prevents large amount of soft deletes & the state from committing from accidental changes to the source configuration if the relative change percent in entities compared to the previous state is above the 'fail_safe_threshold'."),(0,r.kt)("td",{parentName:"tr",align:null},"20.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lineage_overrides"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"TableauLineageOverrides (see below for fields)"),(0,r.kt)("td",{parentName:"tr",align:null},"Mappings to change generated dataset urns. Use only if you really know what you are doing."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lineage_overrides.platform_override_map"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Dict","[str,string]"),(0,r.kt)("td",{parentName:"tr",align:null},"A holder for platform -> platform mappings to generate correct dataset urns"),(0,r.kt)("td",{parentName:"tr",align:null})))))),(0,r.kt)(i.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSONSchema")," for this configuration is inlined below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "title": "TableauConfig",\n  "description": "Any non-Dataset source that produces lineage to Datasets should inherit this class.\\ne.g. Orchestrators, Pipelines, BI Tools etc.",\n  "type": "object",\n  "properties": {\n    "connect_uri": {\n      "title": "Connect Uri",\n      "description": "Tableau host URL.",\n      "type": "string"\n    },\n    "username": {\n      "title": "Username",\n      "description": "Tableau username, must be set if authenticating using username/password.",\n      "type": "string"\n    },\n    "password": {\n      "title": "Password",\n      "description": "Tableau password, must be set if authenticating using username/password.",\n      "type": "string"\n    },\n    "token_name": {\n      "title": "Token Name",\n      "description": "Tableau token name, must be set if authenticating using a personal access token.",\n      "type": "string"\n    },\n    "token_value": {\n      "title": "Token Value",\n      "description": "Tableau token value, must be set if authenticating using a personal access token.",\n      "type": "string"\n    },\n    "site": {\n      "title": "Site",\n      "description": "Tableau Site. Always required for Tableau Online. Use emptystring to connect with Default site on Tableau Server.",\n      "default": "",\n      "type": "string"\n    },\n    "platform_instance": {\n      "title": "Platform Instance",\n      "description": "The instance of the platform that all assets produced by this recipe belong to",\n      "type": "string"\n    },\n    "ssl_verify": {\n      "title": "Ssl Verify",\n      "description": "Whether to verify SSL certificates. If using self-signed certificates, set to false or provide the path to the .pem certificate bundle.",\n      "default": true,\n      "anyOf": [\n        {\n          "type": "boolean"\n        },\n        {\n          "type": "string"\n        }\n      ]\n    },\n    "extract_column_level_lineage": {\n      "title": "Extract Column Level Lineage",\n      "description": "When enabled, extracts column-level lineage from Tableau Datasources",\n      "default": true,\n      "type": "boolean"\n    },\n    "env": {\n      "title": "Env",\n      "description": "Environment to use in namespace when constructing URNs.",\n      "default": "PROD",\n      "type": "string"\n    },\n    "platform": {\n      "title": "Platform",\n      "description": "The platform that this source connects to",\n      "type": "string"\n    },\n    "stateful_ingestion": {\n      "$ref": "#/definitions/TableauStatefulIngestionConfig"\n    },\n    "platform_instance_map": {\n      "title": "Platform Instance Map",\n      "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",\n      "type": "object",\n      "additionalProperties": {\n        "type": "string"\n      }\n    },\n    "projects": {\n      "title": "Projects",\n      "description": "List of projects",\n      "default": [\n        "default"\n      ],\n      "type": "array",\n      "items": {\n        "type": "string"\n      }\n    },\n    "default_schema_map": {\n      "title": "Default Schema Map",\n      "description": "Default schema to use when schema is not found.",\n      "default": {},\n      "type": "object"\n    },\n    "ingest_tags": {\n      "title": "Ingest Tags",\n      "description": "Ingest Tags from source. This will override Tags entered from UI",\n      "default": false,\n      "type": "boolean"\n    },\n    "ingest_owner": {\n      "title": "Ingest Owner",\n      "description": "Ingest Owner from source. This will override Owner info entered from UI",\n      "default": false,\n      "type": "boolean"\n    },\n    "ingest_tables_external": {\n      "title": "Ingest Tables External",\n      "description": "Ingest details for tables external to (not embedded in) tableau as entities.",\n      "default": false,\n      "type": "boolean"\n    },\n    "page_size": {\n      "title": "Page Size",\n      "description": "Number of metadata objects (e.g. CustomSQLTable, PublishedDatasource, etc) to query at a time using Tableau api.",\n      "default": 10,\n      "type": "integer"\n    },\n    "lineage_overrides": {\n      "title": "Lineage Overrides",\n      "description": "Mappings to change generated dataset urns. Use only if you really know what you are doing.",\n      "allOf": [\n        {\n          "$ref": "#/definitions/TableauLineageOverrides"\n        }\n      ]\n    },\n    "extract_usage_stats": {\n      "title": "Extract Usage Stats",\n      "description": "[experimental] Extract usage statistics for dashboards and charts.",\n      "default": false,\n      "type": "boolean"\n    }\n  },\n  "required": [\n    "connect_uri"\n  ],\n  "additionalProperties": false,\n  "definitions": {\n    "DynamicTypedStateProviderConfig": {\n      "title": "DynamicTypedStateProviderConfig",\n      "type": "object",\n      "properties": {\n        "type": {\n          "title": "Type",\n          "description": "The type of the state provider to use. For DataHub use `datahub`",\n          "type": "string"\n        },\n        "config": {\n          "title": "Config",\n          "description": "The configuration required for initializing the state provider. Default: The datahub_api config if set at pipeline level. Otherwise, the default DatahubClientConfig. See the defaults (https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/graph/client.py#L19)."\n        }\n      },\n      "required": [\n        "type"\n      ],\n      "additionalProperties": false\n    },\n    "TableauStatefulIngestionConfig": {\n      "title": "TableauStatefulIngestionConfig",\n      "description": "Specialization of StatefulStaleMetadataRemovalConfig to adding custom config.\\nThis will be used to override the stateful_ingestion config param of StatefulIngestionConfigBase\\nin the TableauConfig.",\n      "type": "object",\n      "properties": {\n        "enabled": {\n          "title": "Enabled",\n          "description": "The type of the ingestion state provider registered with datahub.",\n          "default": false,\n          "type": "boolean"\n        },\n        "max_checkpoint_state_size": {\n          "title": "Max Checkpoint State Size",\n          "description": "The maximum size of the checkpoint state in bytes. Default is 16MB",\n          "default": 16777216,\n          "exclusiveMinimum": 0,\n          "type": "integer"\n        },\n        "state_provider": {\n          "title": "State Provider",\n          "description": "The ingestion state provider configuration.",\n          "allOf": [\n            {\n              "$ref": "#/definitions/DynamicTypedStateProviderConfig"\n            }\n          ]\n        },\n        "ignore_old_state": {\n          "title": "Ignore Old State",\n          "description": "If set to True, ignores the previous checkpoint state.",\n          "default": false,\n          "type": "boolean"\n        },\n        "ignore_new_state": {\n          "title": "Ignore New State",\n          "description": "If set to True, ignores the current checkpoint state.",\n          "default": false,\n          "type": "boolean"\n        },\n        "remove_stale_metadata": {\n          "title": "Remove Stale Metadata",\n          "description": "Soft-deletes the entities of type  in the last successful run but missing in the current run with stateful_ingestion enabled.",\n          "default": true,\n          "type": "boolean"\n        },\n        "fail_safe_threshold": {\n          "title": "Fail Safe Threshold",\n          "description": "Prevents large amount of soft deletes & the state from committing from accidental changes to the source configuration if the relative change percent in entities compared to the previous state is above the \'fail_safe_threshold\'.",\n          "default": 20.0,\n          "minimum": 0.0,\n          "maximum": 100.0,\n          "type": "number"\n        }\n      },\n      "additionalProperties": false\n    },\n    "TableauLineageOverrides": {\n      "title": "TableauLineageOverrides",\n      "type": "object",\n      "properties": {\n        "platform_override_map": {\n          "title": "Platform Override Map",\n          "description": "A holder for platform -> platform mappings to generate correct dataset urns",\n          "type": "object",\n          "additionalProperties": {\n            "type": "string"\n          }\n        }\n      },\n      "additionalProperties": false\n    }\n  }\n}\n')))),(0,r.kt)("h3",{id:"code-coordinates"},"Code Coordinates"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Class Name: ",(0,r.kt)("inlineCode",{parentName:"li"},"datahub.ingestion.source.tableau.TableauSource")),(0,r.kt)("li",{parentName:"ul"},"Browse on ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/source/tableau.py"},"GitHub"))),(0,r.kt)("h2",{id:"questions"},"Questions"),(0,r.kt)("p",null,"If you've got any questions on configuring ingestion for Tableau, feel free to ping us on ",(0,r.kt)("a",{parentName:"p",href:"https://slack.datahubproject.io"},"our Slack")))}c.isMDXComponent=!0}}]);